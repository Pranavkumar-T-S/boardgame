name: Build and Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release, Debug]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            git \
            make \
            pkg-config \
            cmake \
            ninja-build \
            gnome-desktop-testing \
            libasound2-dev \
            libpulse-dev \
            libaudio-dev \
            libjack-dev \
            libsndio-dev \
            libx11-dev \
            libxext-dev \
            libxrandr-dev \
            libxcursor-dev \
            libxfixes-dev \
            libxi-dev \
            libxss-dev \
            libxtst-dev \
            libxkbcommon-dev \
            libdrm-dev \
            libgbm-dev \
            libgl1-mesa-dev \
            libgles2-mesa-dev \
            libegl1-mesa-dev \
            libdbus-1-dev \
            libibus-1.0-dev \
            libudev-dev \
            xvfb

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake ninja

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake ninja

      - name: Configure CMake
        run: cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -G Ninja

      - name: Build project
        run: cmake --build build --config ${{ matrix.build_type }}

      - name: Test application (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd build/bin
          # Run basic smoke test with virtual display for Linux
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            xvfb-run -a timeout 5s ./sample_window || true
          else
            timeout 5s ./sample_window || true
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.build_type }}
          path: build/bin/
